---
description: 
globs: 
alwaysApply: false
---
# Firebase Integration Rules

## Core Services
- Use **Firebase Authentication** for user sign-in, sign-up, and password management
- Integrate **Firestore** for real-time database interactions with structured and normalized data
- Implement **Firebase Storage** for file uploads and downloads with proper error handling
- Use **Firebase Analytics** for tracking user behavior and app performance

## Error Handling
- Handle Firebase exceptions with detailed error messages and appropriate logging
- Implement proper error states in your Bloc/Cubit
- Log Firebase errors for debugging and monitoring

## Security
- Secure database rules in Firestore and Storage based on user roles and permissions
- Implement proper authentication checks before database operations
- Use Firebase Security Rules to protect sensitive data

## Firestore Best Practices
```dart
// Structured query example
Query<Map<String, dynamic>> getUserPosts(String userId) {
  return FirebaseFirestore.instance
      .collection('posts')
      .where('userId', isEqualTo: userId)
      .where('isDeleted', isEqualTo: false)
      .orderBy('createdAt', descending: true)
      .limit(20);
}

// Error handling example
try {
  final doc = await FirebaseFirestore.instance
      .collection('users')
      .doc(userId)
      .get();
  return User.fromJson(doc.data()!);
} on FirebaseException catch (e) {
  log('Firebase error: ${e.code} - ${e.message}');
  throw Exception('Failed to fetch user: ${e.message}');
}
```

## Performance Optimization
- Optimize Firebase queries by using indexes and limiting query results
- Use compound queries efficiently
- Implement pagination for large data sets
- Cache frequently accessed data

## Authentication Patterns
```dart
// Authentication state management
class AuthCubit extends Cubit<AuthState> {
  AuthCubit() : super(const AuthState.initial()) {
    _authStateSubscription = FirebaseAuth.instance
        .authStateChanges()
        .listen(_onAuthStateChanged);
  }

  void _onAuthStateChanged(User? user) {
    if (user != null) {
      emit(AuthState.authenticated(user));
    } else {
      emit(const AuthState.unauthenticated());
    }
  }
}
```

## Data Management
- Use real-time listeners for live data updates
- Implement proper data validation before Firestore writes
- Handle offline scenarios gracefully

